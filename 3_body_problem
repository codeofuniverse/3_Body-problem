# by Mohammad Fawwaz Ansari
import pygame
import math
from random import randint

pygame.init()

WIDTH, HEIGHT = 1300, 650
win = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("3 Body Problem")

PLANET_MASS = 10
PLANET_COLOR = (255, 255, 255)
G = 6
FPS = 60
PLANET_SIZE = 5
BLACK = (0, 0, 0)

class Planet:
    def __init__(self, x1, y1, x2, y2,x3,y3,vel_x1,vel_y1,vel_x2,vel_y2,vel_x3,vel_y3,mass):
        self.x1 = x1
        self.y1 = y1
        self.x2 = x2
        self.y2 = y2
        self.x3 = x3
        self.y3 = y3
        self.vel_x1 = vel_x1
        self.vel_y1 = vel_y1
        self.vel_x2 = vel_x2
        self.vel_y2 = vel_y2
        self.vel_x3 = vel_x3
        self.vel_y3 = vel_y3
        self.mass = mass

    def draw(self):
        x1 = int(self.x1)
        y1 = int(self.y1)
        pygame.draw.circle(win, PLANET_COLOR, (x1, y1), PLANET_SIZE)
            
        x2 = int(self.x2)
        y2 = int(self.y2)
        pygame.draw.circle(win, PLANET_COLOR, (x2, y2), PLANET_SIZE)
    
        x3 = int(self.x3)
        y3 = int(self.y3)
        pygame.draw.circle(win, PLANET_COLOR, (x3, y3), PLANET_SIZE)
   

class Gravity:
    def __init__(self, x1, y1, x2, y2,x3,y3,vel_x1,vel_y1,vel_x2,vel_y2,vel_x3,vel_y3,mass):
        self.x1 = x1
        self.y1 = y1
        self.x2 = x2
        self.y2 = y2
        self.x3 = x3
        self.y3 = y3
        self.vel_x1 = vel_x1
        self.vel_y1 = vel_y1
        self.vel_x2 = vel_x2
        self.vel_y2 = vel_y2
        self.vel_x3 = vel_x3
        self.vel_y3 = vel_y3
        self.mass = mass


       
    def gravity(self):
        distance12 = math.sqrt((self.x1 - self.x2)**2 + (self.y1 - self.y2)**2)
        distance13 = math.sqrt((self.x1 - self.x3)**2 + (self.y1 - self.y3)**2)
        distance23 = math.sqrt((self.x2 - self.x3)**2 + (self.y2 - self.y3)**2)
        print(self.x1,self.x2,self.y1,self.y2,self.x3,self.y3)
        print(distance12)
        print(distance13)
        print(distance23)

        force12 = (G *self.mass**2)/distance12**2
        force13 = (G *self.mass**2)/distance13**2
        force23 = (G *self.mass**2)/distance23**2
        print(f"force {force12 ,force13 ,force23}")
# for 1st planet

        angle12 = math.atan2(self.y2 - self.y1, self.x2 - self.x1)
        force_x_12 = force12* math.cos(angle12)
        force_y_12 = force12* math.sin(angle12)

        angle13 = math.atan2(self.y3 - self.y3, self.x2 - self.x1)
        force_x_13 = force13* math.cos(angle13)
        force_y_13 = force13* math.sin(angle13)

        Tforce_x_1 = force_x_12 + force_x_13
        Tforce_y_1 = force_y_12 + force_y_13

# for 2nd planet

        angle21 = math.atan2(self.y1 - self.y2, self.x1 - self.x2)
        force_x_12 = force12* math.cos(angle21)
        force_y_12 = force12* math.sin(angle21)

        angle23 = math.atan2(self.y3 - self.y2, self.x3 - self.x2)
        force_x_23 = force23* math.cos(angle23)
        force_y_23 = force23* math.sin(angle23)

        Tforce_x_2 = force_x_12 + force_x_23
        Tforce_y_2 = force_y_12 + force_y_23

# for 3rd planet

        angle31 = math.atan2(self.y1 - self.y3, self.x1 - self.x3)
        force_x_13 = force13* math.cos(angle31)
        force_y_13 = force13* math.sin(angle31)

        angle32 = math.atan2(self.y2 - self.y3, self.x2 - self.x3)
        force_x_23 = force23* math.cos(angle32)
        force_y_23 = force23* math.sin(angle32)

        Tforce_x_3 = force_x_13 + force_x_23
        Tforce_y_3 = force_y_13 + force_y_23

        print(f"total force {Tforce_x_1, Tforce_x_2, Tforce_y_1, Tforce_y_2, Tforce_x_3, Tforce_y_3}")


        acceleration_x1 = Tforce_x_1
        acceleration_y1 = Tforce_y_1
        acceleration_x2 = Tforce_x_2
        acceleration_y2 = Tforce_y_2
        acceleration_x3 = Tforce_x_3
        acceleration_y3 = Tforce_y_3

        self.vel_x1 += acceleration_x1
        self.vel_y1 += acceleration_y1
        self.vel_x2 += acceleration_x2
        self.vel_y2 += acceleration_y2
        self.vel_x3 += acceleration_x3
        self.vel_y3 += acceleration_y3


        self.x1 += self.vel_x1
        self.y1 += self.vel_y1
        self.x2 += self.vel_x2
        self.y2 += self.vel_y2
        self.x3 += self.vel_x3
        self.y3 += self.vel_y3
                
def main():
    running = True
    clock = pygame.time.Clock()

        
    planets = [Planet(randint(200,1200), randint(200, 500),
                    randint(200, 1200), randint(200, 500),
                    randint(200, 1200), randint(200, 500),
                    0, 0, 0, 0, 0, 0, PLANET_MASS)]

    while running:
        clock.tick(FPS)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

        win.fill(BLACK)

        for planet in planets:
            print("start")

            planet.draw()

    #    print velocity
            attract = Gravity(planet.x1, planet.y1, planet.x2, planet.y2, planet.x3, planet.y3,
                      planet.vel_x1, planet.vel_y1, planet.vel_x2, planet.vel_y2,
                      planet.vel_x3, planet.vel_y3, PLANET_MASS)
            
            attract.gravity()

            planet.x1, planet.y1 = attract.x1, attract.y1
            planet.x2, planet.y2 = attract.x2, attract.y2
            planet.x3, planet.y3 = attract.x3, attract.y3
            planet.vel_x1, planet.vel_y1 = attract.vel_x1, attract.vel_y1
            planet.vel_x2, planet.vel_y2 = attract.vel_x2, attract.vel_y2
            planet.vel_x3, planet.vel_y3 = attract.vel_x3, attract.vel_y3

            
        print("end")
        pygame.display.update()

    pygame.quit()

if __name__ == "__main__":
    main()



#hello